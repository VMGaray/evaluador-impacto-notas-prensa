{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "evaluador-impacto",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "44c96571-2fd7-45c6-b1c0-ff9a72c1c953",
      "name": "Webhook",
      "webhookId": "d027c7cf-987b-49f4-adaf-d189e2930c8e"
    },
    {
      "parameters": {
        "url": "https://script.google.com/macros/s/AKfycbyPP_fxSfu6vajpZG_0VNVggSA0eIoW38kSCG1a2zA5UlB9dsNoQn8gGf1UZ9l8oMIQJg/exec",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "getData"
            },
            {
              "name": "limit",
              "value": "50"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        0
      ],
      "id": "c9fbc149-c75d-44a2-94c6-0ff96672c8b3",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "\nconst records = $input.first().json.data;\n\n// 2. Obtener los datos de entrada del formulario del usuario (garantizados por el nodo SET)\n// NOTA: Esta sintaxis es correcta para n8n, aunque el editor pueda marcar un error de sintaxis.\nconst organizacion = $json.organizacion || \"N/A\" \nconst tema = $json.tema || \"N/A\" \n\n// 3. Inicializar las Métricas\nconst cobertura = records.length; // Máximo 50\nlet alcanceEstimado = 0;\nlet engagementTotal = 0;\n\n// Recorrer los registros para simular Alcance y Engagement\nrecords.forEach(record => {\n    \n    let baseNum = 0;\n    \n    // VALIDACIÓN CLAVE: Se asegura que \"Query id\" existe y es un string antes de usar slice\n    if (record[\"Query id\"] && typeof record[\"Query id\"] === 'string') {\n        // Usamos .slice(-4) para obtener los últimos 4 caracteres del ID como base numérica.\n        const idString = record[\"Query id\"].slice(-4); \n        // parseInt con || 0 asegura que si no es un número, se use 0\n        baseNum = parseInt(idString) || 0; \n    }\n    \n    // Simulación del Alcance: Multiplicamos la base numérica por 100 para simular un alcance mayor\n    alcanceEstimado += baseNum * 100;\n    \n    // Simulación del Engagement: Sumamos un número aleatorio a un total base\n    engagementTotal += Math.floor(Math.random() * 50);\n});\n\n\n// 4. Función para Asignar Estados (Verde/Amarillo/Rojo)\nconst determinarEstado = (valor, umbralAlto, umbralMedio) => {\n    if (valor >= umbralAlto) return { estado: \"Excelente\", color: \"verde\" };\n    if (valor >= umbralMedio) return { estado: \"Bien\", color: \"amarillo\" };\n    return { estado: \"Malo\", color: \"rojo\" };\n};\n\n// 5. Aplicar Umbrales a las Métricas\n// Cobertura (basado en records.length, máx 50)\nconst analisisCobertura = determinarEstado(cobertura, 40, 20);\n\n// Alcance (basado en la simulación, umbrales más altos)\nconst analisisAlcance = determinarEstado(alcanceEstimado, 400000, 150000);\n\n// Duración: Días que estuvo en agenda (simulado entre 2 y 7 días)\nconst duracionDias = Math.floor(Math.random() * 6) + 2; \nconst analisisDuracion = determinarEstado(duracionDias, 5, 3);\n\n\n// 6. Determinar Resultado Global: FUNCIONÓ / NO FUNCIONÓ\n// Cuenta cuántas métricas NO están en 'rojo'\nlet exitoCount = [analisisCobertura, analisisAlcance, analisisDuracion].filter(a => a.color !== \"rojo\").length;\nconst resultadoGlobal = exitoCount >= 2 ? \"FUNCIONÓ\" : \"NO FUNCIONÓ\";\n\n\n// 7. Devolver el JSON final al frontend\nreturn [{\n    json: {\n        // Datos de Entrada\n        organizacion: organizacion, // Usa la variable local 'organizacion'\n        tema: tema, // Usa la variable local 'tema'\n        \n        // Métricas Calculadas\n        cobertura_medios: cobertura,\n        // Redondeamos el alcance para que se vea mejor\n        alcance_estimado: Math.round(alcanceEstimado), \n        duracion_dias: duracionDias,\n        engagement_total: engagementTotal,\n\n        // Indicadores y Colores\n        analisis: {\n            cobertura: analisisCobertura,\n            alcance: analisisAlcance,\n            duracion: analisisDuracion,\n        },\n        resultado_global: resultadoGlobal\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        0
      ],
      "id": "f7c80b8b-4dcf-4232-a022-32cd0e3ea68c",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        832,
        0
      ],
      "id": "7cd6d0c9-7889-4ddf-b1ce-cb19968abe15",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "690f19aa-2181-4abf-a735-c9edc6de032f",
              "name": "organizacion",
              "value": "={{ $input.first().json.json.organizacion }}",
              "type": "string"
            },
            {
              "id": "45004fe2-dda8-450a-8502-bb8b80bf058b",
              "name": "tema",
              "value": "={{ $input.first().json.json.tema }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        208,
        0
      ],
      "id": "d8453105-707f-4539-a666-de61154bb351",
      "name": "Edit Fields"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cc86d57b-e36e-42e4-9b27-59005e29b81c",
  "meta": {
    "instanceId": "92b1552b31a978954755ee4f385a0c3988d4d5e9bb666adff1528e0f5c541c71"
  },
  "id": "w4EzxMWdtjSPvRma",
  "tags": []
}